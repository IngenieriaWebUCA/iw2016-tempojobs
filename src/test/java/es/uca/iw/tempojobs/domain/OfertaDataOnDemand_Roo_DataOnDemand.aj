// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.tempojobs.domain;

import es.uca.iw.tempojobs.domain.Oferta;
import es.uca.iw.tempojobs.domain.OfertaDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect OfertaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OfertaDataOnDemand: @Component;
    
    private Random OfertaDataOnDemand.rnd = new SecureRandom();
    
    private List<Oferta> OfertaDataOnDemand.data;
    
    public Oferta OfertaDataOnDemand.getNewTransientOferta(int index) {
        Oferta obj = new Oferta();
        setDSueldoBruto(obj, index);
        setFFechaInicio(obj, index);
        setFInicioActividad(obj, index);
        setIVacantes(obj, index);
        setSEstado(obj, index);
        setSExperiencia(obj, index);
        setSFormacion(obj, index);
        setSTipoContrato(obj, index);
        return obj;
    }
    
    public void OfertaDataOnDemand.setDSueldoBruto(Oferta obj, int index) {
        Double dSueldoBruto = new Integer(index).doubleValue();
        obj.setDSueldoBruto(dSueldoBruto);
    }
    
    public void OfertaDataOnDemand.setFFechaInicio(Oferta obj, int index) {
        Date fFechaInicio = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFFechaInicio(fFechaInicio);
    }
    
    public void OfertaDataOnDemand.setFInicioActividad(Oferta obj, int index) {
        Date fInicioActividad = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFInicioActividad(fInicioActividad);
    }
    
    public void OfertaDataOnDemand.setIVacantes(Oferta obj, int index) {
        Integer iVacantes = new Integer(index);
        obj.setIVacantes(iVacantes);
    }
    
    public void OfertaDataOnDemand.setSEstado(Oferta obj, int index) {
        String sEstado = "sEstado_" + index;
        if (sEstado.length() > 32) {
            sEstado = sEstado.substring(0, 32);
        }
        obj.setSEstado(sEstado);
    }
    
    public void OfertaDataOnDemand.setSExperiencia(Oferta obj, int index) {
        String sExperiencia = "sExperiencia_" + index;
        if (sExperiencia.length() > 64) {
            sExperiencia = sExperiencia.substring(0, 64);
        }
        obj.setSExperiencia(sExperiencia);
    }
    
    public void OfertaDataOnDemand.setSFormacion(Oferta obj, int index) {
        String sFormacion = "sFormacion_" + index;
        if (sFormacion.length() > 256) {
            sFormacion = sFormacion.substring(0, 256);
        }
        obj.setSFormacion(sFormacion);
    }
    
    public void OfertaDataOnDemand.setSTipoContrato(Oferta obj, int index) {
        String sTipoContrato = "sTipoContrato_" + index;
        if (sTipoContrato.length() > 32) {
            sTipoContrato = sTipoContrato.substring(0, 32);
        }
        obj.setSTipoContrato(sTipoContrato);
    }
    
    public Oferta OfertaDataOnDemand.getSpecificOferta(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Oferta obj = data.get(index);
        Long id = obj.getId();
        return Oferta.findOferta(id);
    }
    
    public Oferta OfertaDataOnDemand.getRandomOferta() {
        init();
        Oferta obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Oferta.findOferta(id);
    }
    
    public boolean OfertaDataOnDemand.modifyOferta(Oferta obj) {
        return false;
    }
    
    public void OfertaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Oferta.findOfertaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Oferta' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Oferta>();
        for (int i = 0; i < 10; i++) {
            Oferta obj = getNewTransientOferta(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
