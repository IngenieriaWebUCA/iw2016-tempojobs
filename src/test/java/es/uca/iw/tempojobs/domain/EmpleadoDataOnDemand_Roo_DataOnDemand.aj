// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.tempojobs.domain;

import es.uca.iw.tempojobs.domain.Empleado;
import es.uca.iw.tempojobs.domain.EmpleadoDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect EmpleadoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EmpleadoDataOnDemand: @Component;
    
    private Random EmpleadoDataOnDemand.rnd = new SecureRandom();
    
    private List<Empleado> EmpleadoDataOnDemand.data;
    
    public Empleado EmpleadoDataOnDemand.getNewTransientEmpleado(int index) {
        Empleado obj = new Empleado();
        setFFechaNac(obj, index);
        setFFinal(obj, index);
        setFInicio(obj, index);
        setSApellidos(obj, index);
        setSDireccion(obj, index);
        setSEmail(obj, index);
        setSNombre(obj, index);
        setSPuesto(obj, index);
        setSTelefono(obj, index);
        return obj;
    }
    
    public void EmpleadoDataOnDemand.setFFechaNac(Empleado obj, int index) {
        Date fFechaNac = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFFechaNac(fFechaNac);
    }
    
    public void EmpleadoDataOnDemand.setFFinal(Empleado obj, int index) {
        Date fFinal = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFFinal(fFinal);
    }
    
    public void EmpleadoDataOnDemand.setFInicio(Empleado obj, int index) {
        Date fInicio = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFInicio(fInicio);
    }
    
    public void EmpleadoDataOnDemand.setSApellidos(Empleado obj, int index) {
        String sApellidos = "sApellidos_" + index;
        if (sApellidos.length() > 64) {
            sApellidos = sApellidos.substring(0, 64);
        }
        obj.setSApellidos(sApellidos);
    }
    
    public void EmpleadoDataOnDemand.setSDireccion(Empleado obj, int index) {
        String sDireccion = "sDireccion_" + index;
        if (sDireccion.length() > 128) {
            sDireccion = sDireccion.substring(0, 128);
        }
        obj.setSDireccion(sDireccion);
    }
    
    public void EmpleadoDataOnDemand.setSEmail(Empleado obj, int index) {
        String sEmail = "foo" + index + "@bar.com";
        if (sEmail.length() > 128) {
            sEmail = sEmail.substring(0, 128);
        }
        obj.setSEmail(sEmail);
    }
    
    public void EmpleadoDataOnDemand.setSNombre(Empleado obj, int index) {
        String sNombre = "sNombre_" + index;
        if (sNombre.length() > 32) {
            sNombre = sNombre.substring(0, 32);
        }
        obj.setSNombre(sNombre);
    }
    
    public void EmpleadoDataOnDemand.setSPuesto(Empleado obj, int index) {
        String sPuesto = "sPuesto_" + index;
        if (sPuesto.length() > 32) {
            sPuesto = sPuesto.substring(0, 32);
        }
        obj.setSPuesto(sPuesto);
    }
    
    public void EmpleadoDataOnDemand.setSTelefono(Empleado obj, int index) {
        String sTelefono = "sTelefono_" + index;
        if (sTelefono.length() > 16) {
            sTelefono = sTelefono.substring(0, 16);
        }
        obj.setSTelefono(sTelefono);
    }
    
    public Empleado EmpleadoDataOnDemand.getSpecificEmpleado(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Empleado obj = data.get(index);
        Long id = obj.getId();
        return Empleado.findEmpleado(id);
    }
    
    public Empleado EmpleadoDataOnDemand.getRandomEmpleado() {
        init();
        Empleado obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Empleado.findEmpleado(id);
    }
    
    public boolean EmpleadoDataOnDemand.modifyEmpleado(Empleado obj) {
        return false;
    }
    
    public void EmpleadoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Empleado.findEmpleadoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Empleado' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Empleado>();
        for (int i = 0; i < 10; i++) {
            Empleado obj = getNewTransientEmpleado(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
