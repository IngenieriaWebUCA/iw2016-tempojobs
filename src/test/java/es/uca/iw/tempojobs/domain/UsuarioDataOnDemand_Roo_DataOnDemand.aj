// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.tempojobs.domain;

import es.uca.iw.tempojobs.domain.DemandanteDataOnDemand;
import es.uca.iw.tempojobs.domain.EmpleadoDataOnDemand;
import es.uca.iw.tempojobs.domain.EmpresaDataOnDemand;
import es.uca.iw.tempojobs.domain.Usuario;
import es.uca.iw.tempojobs.domain.UsuarioDataOnDemand;
import es.uca.iw.tempojobs.reference.ETipo;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UsuarioDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UsuarioDataOnDemand: @Component;
    
    private Random UsuarioDataOnDemand.rnd = new SecureRandom();
    
    private List<Usuario> UsuarioDataOnDemand.data;
    
    @Autowired
    DemandanteDataOnDemand UsuarioDataOnDemand.demandanteDataOnDemand;
    
    @Autowired
    EmpleadoDataOnDemand UsuarioDataOnDemand.empleadoDataOnDemand;
    
    @Autowired
    EmpresaDataOnDemand UsuarioDataOnDemand.empresaDataOnDemand;
    
    public Usuario UsuarioDataOnDemand.getNewTransientUsuario(int index) {
        Usuario obj = new Usuario();
        setETipo(obj, index);
        setFFechaNac(obj, index);
        setSApellidos(obj, index);
        setSDireccion(obj, index);
        setSEmail(obj, index);
        setSNombre(obj, index);
        setSTelefono(obj, index);
        return obj;
    }
    
    public void UsuarioDataOnDemand.setETipo(Usuario obj, int index) {
        ETipo eTipo = ETipo.class.getEnumConstants()[0];
        obj.setETipo(eTipo);
    }
    
    public void UsuarioDataOnDemand.setFFechaNac(Usuario obj, int index) {
        Date fFechaNac = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFFechaNac(fFechaNac);
    }
    
    public void UsuarioDataOnDemand.setSApellidos(Usuario obj, int index) {
        String sApellidos = "sApellidos_" + index;
        if (sApellidos.length() > 64) {
            sApellidos = sApellidos.substring(0, 64);
        }
        obj.setSApellidos(sApellidos);
    }
    
    public void UsuarioDataOnDemand.setSDireccion(Usuario obj, int index) {
        String sDireccion = "sDireccion_" + index;
        if (sDireccion.length() > 128) {
            sDireccion = sDireccion.substring(0, 128);
        }
        obj.setSDireccion(sDireccion);
    }
    
    public void UsuarioDataOnDemand.setSEmail(Usuario obj, int index) {
        String sEmail = "foo" + index + "@bar.com";
        if (sEmail.length() > 128) {
            sEmail = sEmail.substring(0, 128);
        }
        obj.setSEmail(sEmail);
    }
    
    public void UsuarioDataOnDemand.setSNombre(Usuario obj, int index) {
        String sNombre = "sNombre_" + index;
        if (sNombre.length() > 32) {
            sNombre = sNombre.substring(0, 32);
        }
        obj.setSNombre(sNombre);
    }
    
    public void UsuarioDataOnDemand.setSTelefono(Usuario obj, int index) {
        String sTelefono = "sTelefono_" + index;
        if (sTelefono.length() > 16) {
            sTelefono = sTelefono.substring(0, 16);
        }
        obj.setSTelefono(sTelefono);
    }
    
    public Usuario UsuarioDataOnDemand.getSpecificUsuario(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Usuario obj = data.get(index);
        Long id = obj.getId();
        return Usuario.findUsuario(id);
    }
    
    public Usuario UsuarioDataOnDemand.getRandomUsuario() {
        init();
        Usuario obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Usuario.findUsuario(id);
    }
    
    public boolean UsuarioDataOnDemand.modifyUsuario(Usuario obj) {
        return false;
    }
    
    public void UsuarioDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Usuario.findUsuarioEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Usuario' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Usuario>();
        for (int i = 0; i < 10; i++) {
            Usuario obj = getNewTransientUsuario(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
