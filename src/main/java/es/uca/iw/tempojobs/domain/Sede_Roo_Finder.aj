// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.tempojobs.domain;

import es.uca.iw.tempojobs.domain.Sede;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Sede_Roo_Finder {
    
    public static Long Sede.countFindSedesByLocalidadLikeAndProvinciaLike(String localidad, String provincia) {
        if (localidad == null || localidad.length() == 0) throw new IllegalArgumentException("The localidad argument is required");
        localidad = localidad.replace('*', '%');
        if (localidad.charAt(0) != '%') {
            localidad = "%" + localidad;
        }
        if (localidad.charAt(localidad.length() - 1) != '%') {
            localidad = localidad + "%";
        }
        if (provincia == null || provincia.length() == 0) throw new IllegalArgumentException("The provincia argument is required");
        provincia = provincia.replace('*', '%');
        if (provincia.charAt(0) != '%') {
            provincia = "%" + provincia;
        }
        if (provincia.charAt(provincia.length() - 1) != '%') {
            provincia = provincia + "%";
        }
        EntityManager em = Sede.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Sede AS o WHERE LOWER(o.localidad) LIKE LOWER(:localidad)  AND LOWER(o.provincia) LIKE LOWER(:provincia)", Long.class);
        q.setParameter("localidad", localidad);
        q.setParameter("provincia", provincia);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Sede> Sede.findSedesByLocalidadLikeAndProvinciaLike(String localidad, String provincia) {
        if (localidad == null || localidad.length() == 0) throw new IllegalArgumentException("The localidad argument is required");
        localidad = localidad.replace('*', '%');
        if (localidad.charAt(0) != '%') {
            localidad = "%" + localidad;
        }
        if (localidad.charAt(localidad.length() - 1) != '%') {
            localidad = localidad + "%";
        }
        if (provincia == null || provincia.length() == 0) throw new IllegalArgumentException("The provincia argument is required");
        provincia = provincia.replace('*', '%');
        if (provincia.charAt(0) != '%') {
            provincia = "%" + provincia;
        }
        if (provincia.charAt(provincia.length() - 1) != '%') {
            provincia = provincia + "%";
        }
        EntityManager em = Sede.entityManager();
        TypedQuery<Sede> q = em.createQuery("SELECT o FROM Sede AS o WHERE LOWER(o.localidad) LIKE LOWER(:localidad)  AND LOWER(o.provincia) LIKE LOWER(:provincia)", Sede.class);
        q.setParameter("localidad", localidad);
        q.setParameter("provincia", provincia);
        return q;
    }
    
    public static TypedQuery<Sede> Sede.findSedesByLocalidadLikeAndProvinciaLike(String localidad, String provincia, String sortFieldName, String sortOrder) {
        if (localidad == null || localidad.length() == 0) throw new IllegalArgumentException("The localidad argument is required");
        localidad = localidad.replace('*', '%');
        if (localidad.charAt(0) != '%') {
            localidad = "%" + localidad;
        }
        if (localidad.charAt(localidad.length() - 1) != '%') {
            localidad = localidad + "%";
        }
        if (provincia == null || provincia.length() == 0) throw new IllegalArgumentException("The provincia argument is required");
        provincia = provincia.replace('*', '%');
        if (provincia.charAt(0) != '%') {
            provincia = "%" + provincia;
        }
        if (provincia.charAt(provincia.length() - 1) != '%') {
            provincia = provincia + "%";
        }
        EntityManager em = Sede.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Sede AS o WHERE LOWER(o.localidad) LIKE LOWER(:localidad)  AND LOWER(o.provincia) LIKE LOWER(:provincia)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Sede> q = em.createQuery(queryBuilder.toString(), Sede.class);
        q.setParameter("localidad", localidad);
        q.setParameter("provincia", provincia);
        return q;
    }
    
}
