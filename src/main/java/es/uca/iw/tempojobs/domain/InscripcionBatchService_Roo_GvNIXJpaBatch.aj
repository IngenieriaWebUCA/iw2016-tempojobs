// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.tempojobs.domain;

import com.mysema.query.BooleanBuilder;
import com.mysema.query.jpa.impl.JPADeleteClause;
import com.mysema.query.jpa.impl.JPAQuery;
import com.mysema.query.types.path.PathBuilder;
import es.uca.iw.tempojobs.domain.Inscripcion;
import es.uca.iw.tempojobs.domain.InscripcionBatchService;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import org.springframework.transaction.annotation.Transactional;

privileged aspect InscripcionBatchService_Roo_GvNIXJpaBatch {
    
    public Class InscripcionBatchService.getEntity() {
        return Inscripcion.class;
    }
    
    public EntityManager InscripcionBatchService.entityManager() {
        return Inscripcion.entityManager();
    }
    
    @Transactional
    public int InscripcionBatchService.deleteAll() {
        return entityManager().createQuery("DELETE FROM Inscripcion").executeUpdate();
    }
    
    @Transactional
    public int InscripcionBatchService.deleteIn(List<Long> ids) {
        Query query = entityManager().createQuery("DELETE FROM Inscripcion as i WHERE i.id IN (:idList)");
        query.setParameter("idList", ids);
        return query.executeUpdate();
    }
    
    @Transactional
    public int InscripcionBatchService.deleteNotIn(List<Long> ids) {
        Query query = entityManager().createQuery("DELETE FROM Inscripcion as i WHERE i.id NOT IN (:idList)");
        query.setParameter("idList", ids);
        return query.executeUpdate();
    }
    
    @Transactional
    public void InscripcionBatchService.create(List<Inscripcion> inscripcions) {
        for( Inscripcion inscripcion : inscripcions) {
            inscripcion.persist();
        }
    }
    
    @Transactional
    public List<Inscripcion> InscripcionBatchService.update(List<Inscripcion> inscripcions) {
        List<Inscripcion> merged = new ArrayList<Inscripcion>();
        for( Inscripcion inscripcion : inscripcions) {
            merged.add( inscripcion.merge() );
        }
        return merged;
    }
    
    public List<Inscripcion> InscripcionBatchService.findByValues(Map<String, Object> propertyValues) {
        
        // if there is a filter
        if (propertyValues != null && !propertyValues.isEmpty()) {
            // Prepare a predicate
            BooleanBuilder baseFilterPredicate = new BooleanBuilder();
            
            // Base filter. Using BooleanBuilder, a cascading builder for
            // Predicate expressions
            PathBuilder<Inscripcion> entity = new PathBuilder<Inscripcion>(Inscripcion.class, "entity");
            
            // Build base filter
            for (String key : propertyValues.keySet()) {
                baseFilterPredicate.and(entity.get(key).eq(propertyValues.get(key)));
            }
            
            // Create a query with filter
            JPAQuery query = new JPAQuery(Inscripcion.entityManager());
            query = query.from(entity);
            
            // execute query
            return query.where(baseFilterPredicate).list(entity);
        }
        
        // no filter: return all elements
        return Inscripcion.findAllInscripcions();
    }
    
    @Transactional
    public long InscripcionBatchService.deleteByValues(Map<String, Object> propertyValues) {
        
        // if there no is a filter
        if (propertyValues == null || propertyValues.isEmpty()) {
            throw new IllegalArgumentException("Missing property values");
        }
        // Prepare a predicate
        BooleanBuilder baseFilterPredicate = new BooleanBuilder();
        
        // Base filter. Using BooleanBuilder, a cascading builder for
        // Predicate expressions
        PathBuilder<Inscripcion> entity = new PathBuilder<Inscripcion>(Inscripcion.class, "entity");
        
        // Build base filter
        for (String key : propertyValues.keySet()) {
            baseFilterPredicate.and(entity.get(key).eq(propertyValues.get(key)));
        }
        
        // Create a query with filter
        JPADeleteClause delete = new JPADeleteClause(Inscripcion.entityManager(),entity);
        
        // execute delete
        return delete.where(baseFilterPredicate).execute();
    }
    
    @Transactional
    public void InscripcionBatchService.delete(List<Inscripcion> inscripcions) {
        for( Inscripcion inscripcion : inscripcions) {
            inscripcion.remove();
        }
    }
    
}
