// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.tempojobs.domain;

import es.uca.iw.tempojobs.domain.Experiencia;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Experiencia_Roo_Finder {
    
    public static Long Experiencia.countFindExperienciasByPuestoLike(String puesto) {
        if (puesto == null || puesto.length() == 0) throw new IllegalArgumentException("The puesto argument is required");
        puesto = puesto.replace('*', '%');
        if (puesto.charAt(0) != '%') {
            puesto = "%" + puesto;
        }
        if (puesto.charAt(puesto.length() - 1) != '%') {
            puesto = puesto + "%";
        }
        EntityManager em = Experiencia.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Experiencia AS o WHERE LOWER(o.puesto) LIKE LOWER(:puesto)", Long.class);
        q.setParameter("puesto", puesto);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Experiencia> Experiencia.findExperienciasByPuestoLike(String puesto) {
        if (puesto == null || puesto.length() == 0) throw new IllegalArgumentException("The puesto argument is required");
        puesto = puesto.replace('*', '%');
        if (puesto.charAt(0) != '%') {
            puesto = "%" + puesto;
        }
        if (puesto.charAt(puesto.length() - 1) != '%') {
            puesto = puesto + "%";
        }
        EntityManager em = Experiencia.entityManager();
        TypedQuery<Experiencia> q = em.createQuery("SELECT o FROM Experiencia AS o WHERE LOWER(o.puesto) LIKE LOWER(:puesto)", Experiencia.class);
        q.setParameter("puesto", puesto);
        return q;
    }
    
    public static TypedQuery<Experiencia> Experiencia.findExperienciasByPuestoLike(String puesto, String sortFieldName, String sortOrder) {
        if (puesto == null || puesto.length() == 0) throw new IllegalArgumentException("The puesto argument is required");
        puesto = puesto.replace('*', '%');
        if (puesto.charAt(0) != '%') {
            puesto = "%" + puesto;
        }
        if (puesto.charAt(puesto.length() - 1) != '%') {
            puesto = puesto + "%";
        }
        EntityManager em = Experiencia.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Experiencia AS o WHERE LOWER(o.puesto) LIKE LOWER(:puesto)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Experiencia> q = em.createQuery(queryBuilder.toString(), Experiencia.class);
        q.setParameter("puesto", puesto);
        return q;
    }
    
}
